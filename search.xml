<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo部署个人网站至github</title>
    <url>/2023/11/05/Hexo%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%87%B3github/</url>
    <content><![CDATA[<h2 id="需要的工具："><a href="#需要的工具：" class="headerlink" title="需要的工具："></a>需要的工具：</h2><p>​	node.js hexo</p>
<p>​	git github</p>
<h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><h3 id="1-下载node-js、git，-注册github账户"><a href="#1-下载node-js、git，-注册github账户" class="headerlink" title="1.下载node.js、git， 注册github账户"></a>1.下载node.js、git， 注册github账户</h3><p>node.js:<a class="link"   href="https://nodejs.org/en" >https://nodejs.org/en<i class="fas fa-external-link-alt"></i></a></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="/2023/11/05/Hexo%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%87%B3github/image-20231105195727340.png"
                      alt="image-20231105195727340"
                ></p>
<p>git:<a class="link"   href="https://git-scm.com/download/win" >https://git-scm.com/download/win<i class="fas fa-external-link-alt"></i></a></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="/2023/11/05/Hexo%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%87%B3github/image-20231105195842189.png"
                      alt="image-20231105195842189"
                ></p>
<p>注册github账户：<a class="link"   href="https://github.com/" >https://github.com/<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="2-下载hexo"><a href="#2-下载hexo" class="headerlink" title="2.下载hexo"></a>2.下载hexo</h3><p>参考文档：<a class="link"   href="https://hexo.io/zh-cn/docs/" >https://hexo.io/zh-cn/docs/<i class="fas fa-external-link-alt"></i></a></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="/2023/11/05/Hexo%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%87%B3github/image-20231105200313670.png"
                      alt="image-20231105200313670"
                ></p>
<p>npm是node.js自带的包管理器</p>
<h3 id="3-建立网站文件夹"><a href="#3-建立网站文件夹" class="headerlink" title="3.建立网站文件夹"></a>3.建立网站文件夹</h3><p>首先在windows上创建一个文件夹，右键复制文件地址</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="/2023/11/05/Hexo%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%87%B3github/image-20231105201213603.png"
                      alt="image-20231105201213603"
                ></p>
<p>接下来powershell运行<code>hexo init 复制的文件地址</code>如下</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="/2023/11/05/Hexo%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%87%B3github/image-20231105200814867.png"
                      alt="image-20231105200814867"
                ></p>
<p>接下来powershell运行<code>cd 复制的文件地址</code></p>
<p>最后powershell运行 <code> npm install</code></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="/2023/11/05/Hexo%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%87%B3github/image-20231105201242658.png"
                      alt="image-20231105201242658"
                ></p>
<h3 id="4-测试本地部署"><a href="#4-测试本地部署" class="headerlink" title="4.测试本地部署"></a>4.测试本地部署</h3><p>先运行<code>hexo deploy</code>再运行<code>hexo server</code></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="/2023/11/05/Hexo%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%87%B3github/image-20231105201611397.png"
                      alt="image-20231105201611397"
                ></p>
<p>这里不要关闭powershell，在浏览器里输入 <code>localhost:4000</code> 可以看到默认网页</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="/2023/11/05/Hexo%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%87%B3github/image-20231105201822004.png"
                      alt="image-20231105201822004"
                ></p>
<h3 id="5-部署到github"><a href="#5-部署到github" class="headerlink" title="5.部署到github"></a>5.部署到github</h3><h4 id="5-1-首先在github上新建repository"><a href="#5-1-首先在github上新建repository" class="headerlink" title="5.1 首先在github上新建repository"></a>5.1 首先在github上新建repository</h4><p><img  
                     lazyload
                     alt="image"
                     data-src="/2023/11/05/Hexo%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%87%B3github/image-20231105202457906.png"
                      alt="image-20231105202457906"
                ></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="/2023/11/05/Hexo%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%87%B3github/image-20231105202246817.png"
                      alt="image-20231105202246817"
                ></p>
<p>划红线处必须修改为 github用户名.github.io 的形式，然后点击右下角Create repository</p>
<h4 id="5-2-修改配置文件"><a href="#5-2-修改配置文件" class="headerlink" title="5.2 修改配置文件"></a>5.2 修改配置文件</h4><p>首先修改刚才新建文件中的配置文件_config.yml</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="/2023/11/05/Hexo%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%87%B3github/image-20231105201924002.png"
                      alt="image-20231105201924002"
                ></p>
<p>拉到最底下修改deploy: 后几行为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/此处为你的github用户名/此处为刚才创建的仓库名</span><br><span class="line">  # example, https://github.com/hexojs/hexojs.github.io</span><br><span class="line">  branch: gh-pages</span><br></pre></td></tr></table></figure>

<h4 id="5-3部署"><a href="#5-3部署" class="headerlink" title="5.3部署"></a>5.3部署</h4><p>powershell x运行<code>cd 新建的网站文件夹</code> </p>
<p>再运行<code>npm install hexo-deployer-git --save</code>安装hexo-deployer-git</p>
<p>然后运行<code>hexo clean</code></p>
<p>再运行<code>hexo deploy</code></p>
<p>在弹出的窗口中选择网页登录github账号即可</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="/2023/11/05/Hexo%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%87%B3github/image-20231105204434821.png"
                      alt="image-20231105204434821"
                ></p>
<p>接下来访问 github用户名.github.io 即可看到网页（若未显示则可能要等几分钟再访问）</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="/2023/11/05/Hexo%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%87%B3github/image-20231105204705905.png"
                      alt="image-20231105204705905"
                ></p>
<h3 id="6-发表新的推文"><a href="#6-发表新的推文" class="headerlink" title="6.发表新的推文"></a>6.发表新的推文</h3><p>同样powershell先<code>cd 创建的网站文件夹</code> 再输入<code>hexo new post 推文标题</code></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="/2023/11/05/Hexo%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%87%B3github/image-20231105204954918.png"
                      alt="image-20231105204954918"
                ></p>
<p>然后去紫色文件地址里找 推文标题.md 文件修改即可,修改完成后重复5.3步骤即可更新界面</p>
<p>在文章中插入图片参考<a class="link"   href="https://juejin.cn/post/6882619951857811469" >https://juejin.cn/post/6882619951857811469<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>Welcome to use Hexo Theme Keep</title>
    <url>/2022/10/25/welcome-to-use-hexo-theme-keep/</url>
    <content><![CDATA[<p>Welcome to use Hexo Theme Keep.</p>
<p>This is your very first post. Check <a class="link"   href="https://keep-docs.xpoet.cn/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Keep theme, you can ask me on <a class="link"   href="https://github.com/XPoet/hexo-theme-keep/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Keep</tag>
      </tags>
  </entry>
  <entry>
    <title>软件清单&amp;介绍</title>
    <url>/2023/11/13/%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95&amp;%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="GNU"><a href="#GNU" class="headerlink" title="GNU"></a><a class="link"   href="https://www.gnu.org/software/software.html" >GNU<i class="fas fa-external-link-alt"></i></a></h1><p>GNU是一个100%由自由软件构成的操作系统。它由 Richard Stallman（rms）在1983年发起，并由许多珍视软件用户自由的人士共同协作开发。技术上，GNU大致类似Unix。但是和Unix不同，GNU给予其用户自由。</p>
<p>GNU系统包括所有<a class="link"   href="https://www.gnu.org/philosophy/categories.html#GNUsoftware" >正式的GNU软件包<i class="fas fa-external-link-alt"></i></a>（列表如下），还包括非GNU的自由软件，其中有著名的TeX和X Window系统。另外，GNU系统并非是一个单一的静态软件集合；用户和发布者可以根据他们的需要选择不同的软件包。这些仍然是GNU系统的一种变形。</p>
<h1 id="GLIBC-The-GNU-C-Library"><a href="#GLIBC-The-GNU-C-Library" class="headerlink" title="GLIBC(The GNU C Library)"></a><a class="link"   href="https://www.gnu.org/s/libc/" >GLIBC<i class="fas fa-external-link-alt"></i></a>(The GNU C Library)</h1><p>glibc是<a class="link"   href="https://baike.baidu.com/item/GNU?fromModule=lemma_inlink" >GNU<i class="fas fa-external-link-alt"></i></a>发布的libc库，即c<a class="link"   href="https://baike.baidu.com/item/%E8%BF%90%E8%A1%8C%E5%BA%93/5587282?fromModule=lemma_inlink" >运行库<i class="fas fa-external-link-alt"></i></a>。glibc是<a class="link"   href="https://baike.baidu.com/item/linux%E7%B3%BB%E7%BB%9F/1732935?fromModule=lemma_inlink" >linux系统<i class="fas fa-external-link-alt"></i></a>中最底层的<a class="link"   href="https://baike.baidu.com/item/api/10154?fromModule=lemma_inlink" >api<i class="fas fa-external-link-alt"></i></a>，几乎其它任何运行库都会依赖于glibc。glibc除了封装<a class="link"   href="https://baike.baidu.com/item/linux?fromModule=lemma_inlink" >linux<i class="fas fa-external-link-alt"></i></a>操作系统所提供的<a class="link"   href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1/11027121?fromModule=lemma_inlink" >系统服务<i class="fas fa-external-link-alt"></i></a>外，它本身也提供了许多其它一些必要功能服务的实现。由于glibc囊括了几乎所有的 <a class="link"   href="https://baike.baidu.com/item/UNIX?fromModule=lemma_inlink" >UNIX<i class="fas fa-external-link-alt"></i></a> 通行的标准，可以想见其内容包罗万象。而就像其他的 UNIX 系统一样，其内含的档案群分散于系统的树状<a class="link"   href="https://baike.baidu.com/item/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/4348167?fromModule=lemma_inlink" >目录结构<i class="fas fa-external-link-alt"></i></a>中，像一个支架一般撑起整个操作系统。在 GNU&#x2F;Linux 系统中，其C函式库发展史点出了GNU&#x2F;Linux 演进的几个重要里程碑，用 glibc 作为系统的C函式库，是GNU&#x2F;Linux演进的一个重要里程碑。</p>
<p>glibc是一种按照<a class="link"   href="https://baike.baidu.com/item/LGPL?fromModule=lemma_inlink" >LGPL<i class="fas fa-external-link-alt"></i></a>许可协议发布的，自由的，公开源代码的，方便从网络下载的C的编译程序。GNU C运行期库，是一种C<a class="link"   href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E5%BA%93?fromModule=lemma_inlink" >函数库<i class="fas fa-external-link-alt"></i></a>，是程序运行时使用到的一些<a class="link"   href="https://baike.baidu.com/item/API?fromModule=lemma_inlink" >API<i class="fas fa-external-link-alt"></i></a>集合，它们一般是已预先<a class="link"   href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91?fromModule=lemma_inlink" >编译<i class="fas fa-external-link-alt"></i></a>好，以<a class="link"   href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6?fromModule=lemma_inlink" >二进制<i class="fas fa-external-link-alt"></i></a>代码形式存在<a class="link"   href="https://baike.baidu.com/item/Linux?fromModule=lemma_inlink" >Linux<i class="fas fa-external-link-alt"></i></a>类系统中，GNU C运行期库通常作为GNU C编译程序的一个部分发布。</p>
<p>glibc最初是<a class="link"   href="https://baike.baidu.com/item/%E8%87%AA%E7%94%B1%E8%BD%AF%E4%BB%B6%E5%9F%BA%E9%87%91%E4%BC%9A?fromModule=lemma_inlink" >自由软件基金会<i class="fas fa-external-link-alt"></i></a>（FSF）为其<a class="link"   href="https://baike.baidu.com/item/GNU?fromModule=lemma_inlink" >GNU<i class="fas fa-external-link-alt"></i></a>操作系统所写，但当前最主要的应用是配合<a class="link"   href="https://baike.baidu.com/item/Linux%E5%86%85%E6%A0%B8?fromModule=lemma_inlink" >Linux内核<i class="fas fa-external-link-alt"></i></a>，成为GNU&#x2F;Linux操作系统一个重要的组成部分。</p>
<h1 id="MinGW-Minimalist-GNU-for-Windows"><a href="#MinGW-Minimalist-GNU-for-Windows" class="headerlink" title="MinGW(Minimalist GNU for Windows)"></a>MinGW(Minimalist GNU for Windows)</h1><h1 id="POSIX-Portable-Operating-System-Interface-of-UNIX"><a href="#POSIX-Portable-Operating-System-Interface-of-UNIX" class="headerlink" title="POSIX(Portable Operating System Interface of UNIX)"></a>POSIX(Portable Operating System Interface of UNIX)</h1><p><strong>可移植作业系统接口</strong>（英语：Portable Operating System Interface，缩写为<strong>POSIX</strong>）是<a class="link"   href="https://zh.wikipedia.org/wiki/IEEE" >IEEE<i class="fas fa-external-link-alt"></i></a>为要在各种<a class="link"   href="https://zh.wikipedia.org/wiki/UNIX" >UNIX<i class="fas fa-external-link-alt"></i></a><a class="link"   href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" >操作系统<i class="fas fa-external-link-alt"></i></a>上运行软件，而定义<a class="link"   href="https://zh.wikipedia.org/wiki/API" >API<i class="fas fa-external-link-alt"></i></a>的一系列互相关联的标准的总称，其正式称呼为IEEE Std 1003，而国际标准名称为<a class="link"   href="https://zh.wikipedia.org/wiki/ISO" >ISO<i class="fas fa-external-link-alt"></i></a>&#x2F;<a class="link"   href="https://zh.wikipedia.org/wiki/IEC" >IEC<i class="fas fa-external-link-alt"></i></a> 9945。此标准源于一个大约开始于1985年的项目。POSIX这个名称是由<a class="link"   href="https://zh.wikipedia.org/wiki/%E7%90%86%E6%9F%A5%E5%BE%B7%C2%B7%E6%96%AF%E6%89%98%E6%9B%BC" >理查德·斯托曼<i class="fas fa-external-link-alt"></i></a>（RMS）应IEEE的要求而提议的一个易于记忆的名称。它基本上是Portable Operating System Interface（可移植操作系统接口）的缩写，而<strong>X</strong>则表明其对Unix API的传承。</p>
<p><a class="link"   href="https://zh.wikipedia.org/wiki/Linux" >Linux<i class="fas fa-external-link-alt"></i></a>基本上逐步实现了POSIX兼容，但并没有参加正式的POSIX认证。[<a class="link"   href="https://zh.wikipedia.org/zh-hans/%E5%8F%AF%E7%A7%BB%E6%A4%8D%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3#cite_note-1" >1]<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E8%BD%AF" >微软<i class="fas fa-external-link-alt"></i></a>的<a class="link"   href="https://zh.wikipedia.org/wiki/Windows_NT" >Windows NT<i class="fas fa-external-link-alt"></i></a>声称部分实现了POSIX标准。</p>
<p>当前的POSIX主要分为四个部分[<a class="link"   href="https://zh.wikipedia.org/zh-hans/%E5%8F%AF%E7%A7%BB%E6%A4%8D%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3#cite_note-2" >2]<i class="fas fa-external-link-alt"></i></a>：Base Definitions、System Interfaces、Shell and Utilities和Rationale。</p>
<h1 id="MSYS2-Minimal-GNU（POSIX）system-on-Windows"><a href="#MSYS2-Minimal-GNU（POSIX）system-on-Windows" class="headerlink" title="MSYS2(Minimal GNU（POSIX）system on Windows)"></a>MSYS2(Minimal GNU（POSIX）system on Windows)</h1><p>是一个小型的GNU环境，包括基本的<strong>bash</strong>，<strong>make</strong>等等。与Cygwin大致相当。</p>
<h1 id="Cygwin"><a href="#Cygwin" class="headerlink" title="Cygwin"></a>Cygwin</h1><p>Cygwin包括了一套库，该库在<a class="link"   href="https://zh.wikipedia.org/wiki/Win32" >Win32<i class="fas fa-external-link-alt"></i></a>系统下实现了POSIX系统调用的<a class="link"   href="https://zh.wikipedia.org/wiki/API" >API<i class="fas fa-external-link-alt"></i></a>；还有一套<a class="link"   href="https://zh.wikipedia.org/wiki/GNU" >GNU<i class="fas fa-external-link-alt"></i></a>开发工具集（比如<a class="link"   href="https://zh.wikipedia.org/wiki/GCC" >GCC<i class="fas fa-external-link-alt"></i></a>、<a class="link"   href="https://zh.wikipedia.org/wiki/GNU_%E9%99%A4%E9%8C%AF%E5%99%A8" >GDB<i class="fas fa-external-link-alt"></i></a>），这样可以进行简单的软件开发；还有一些UNIX系统下的常见程序。2001年，新增了<a class="link"   href="https://zh.wikipedia.org/wiki/X_Window_System" >X Window System<i class="fas fa-external-link-alt"></i></a>。</p>
<p>Cygwin由两部分组成：动态链接库（DLL），以C标准库的形式作为API兼容性层提供POSIX API功能的重要部分，以及提供Unix的大量软件工具和应用程序样的外观和感觉。 [<a class="link"   href="https://zh.wikipedia.org/zh-hans/Cygwin#cite_note-auto1-2" >2]<i class="fas fa-external-link-alt"></i></a></p>
<p>另外还有一个名为<a class="link"   href="https://zh.wikipedia.org/wiki/MinGW" >MinGW<i class="fas fa-external-link-alt"></i></a>的库，可以跟Windows本地的MSVCRT库（<a class="link"   href="https://zh.wikipedia.org/wiki/Windows_API" >Windows API<i class="fas fa-external-link-alt"></i></a>）一起工作。MinGW占用内存、硬盘空间都比较少，能够链接到任意软件，但它对POSIX规范的实现没有Cygwin库完备。</p>
<p>Red Hat规定，Cygwin库遵守<a class="link"   href="https://zh.wikipedia.org/wiki/GNU%E9%80%9A%E7%94%A8%E5%85%AC%E5%85%B1%E8%AE%B8%E5%8F%AF%E8%AF%81" >GNU通用公共许可证<i class="fas fa-external-link-alt"></i></a>，但也可以跟符合<a class="link"   href="https://zh.wikipedia.org/wiki/%E9%96%8B%E6%94%BE%E5%8E%9F%E5%A7%8B%E7%A2%BC" >开源定义<i class="fas fa-external-link-alt"></i></a>的<a class="link"   href="https://zh.wikipedia.org/wiki/%E8%87%AA%E7%94%B1%E8%BD%AF%E4%BB%B6" >自由软件<i class="fas fa-external-link-alt"></i></a>链接。Red Hat另有价格不菲的许可协议，这样使用Cygwin库的<a class="link"   href="https://zh.wikipedia.org/wiki/%E4%B8%93%E5%B1%9E%E8%BD%AF%E4%BB%B6" >专属软件<i class="fas fa-external-link-alt"></i></a>，就可以进行再发布。</p>
]]></content>
  </entry>
  <entry>
    <title>大顶堆</title>
    <url>/2023/11/15/%E5%A4%A7%E9%A1%B6%E5%A0%86/</url>
    <content><![CDATA[<h1 id="大顶堆"><a href="#大顶堆" class="headerlink" title="大顶堆"></a>大顶堆</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEAPSIZE 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN 0x80000000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> heap[HEAPSIZE];</span><br><span class="line"><span class="type">int</span> pheap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;<span class="comment">//初始化</span></span><br><span class="line">    pheap=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;HEAPSIZE;i++)&#123;</span><br><span class="line">        heap[i]=MIN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rise</span><span class="params">(<span class="type">int</span> value,<span class="type">int</span> pos)</span></span>&#123;<span class="comment">//修改pos位值为value，并且让其上浮</span></span><br><span class="line">    <span class="type">int</span> p=pos;</span><br><span class="line">    <span class="type">int</span> nextp=(p<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="number">0</span>&amp;&amp;heap[nextp]&lt;value)&#123;<span class="comment">//p非0防止死循环，当父节点较小时</span></span><br><span class="line">        heap[p]=heap[nextp];</span><br><span class="line">        p=nextp;</span><br><span class="line">        nextp=(p<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    heap[p]=value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sink</span><span class="params">(<span class="type">int</span> value,<span class="type">int</span> pos)</span></span>&#123;<span class="comment">//修改pos位值为value，并且让其下沉</span></span><br><span class="line">    <span class="type">int</span> p=pos;<span class="comment">//p一直指向每轮迭代后value理应位置</span></span><br><span class="line">    <span class="type">int</span> nextp_l=<span class="number">2</span>*p+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> nextp_r=nextp_l+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(nextp_r&lt;pheap&amp;&amp;(value&lt;heap[nextp_l]||value&lt;heap[nextp_r]))&#123;<span class="comment">//nextp_r&lt;pheap防止右子节点越界报错，当存在子节点较大的情况</span></span><br><span class="line">        <span class="keyword">if</span>(heap[nextp_l]&gt;heap[nextp_r])&#123;<span class="comment">//让大的上浮（大的一定比value大）</span></span><br><span class="line">            heap[p]=heap[nextp_l];</span><br><span class="line">            p=nextp_l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            heap[p]=heap[nextp_r];</span><br><span class="line">            p=nextp_r;</span><br><span class="line">        &#125;</span><br><span class="line">        nextp_l=<span class="number">2</span>*p+<span class="number">1</span>;</span><br><span class="line">        nextp_r=nextp_l+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(nextp_l==pheap<span class="number">-1</span>&amp;&amp;value&lt;heap[nextp_l])&#123;<span class="comment">//当左子节点未越界且其值大于value</span></span><br><span class="line">        heap[p]=heap[nextp_l];</span><br><span class="line">        p=nextp_l;</span><br><span class="line">    &#125;</span><br><span class="line">    heap[p]=value;<span class="comment">//此时p指向value应该在的位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> value,<span class="type">int</span> pos)</span></span>&#123;<span class="comment">//修改pos位值为value</span></span><br><span class="line">    <span class="keyword">if</span>(heap[(pos<span class="number">-1</span>)/<span class="number">2</span>]&lt;value)<span class="comment">//如果父节点值较小</span></span><br><span class="line">        <span class="built_in">rise</span>(value,pos);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">sink</span>(value,pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> value)</span></span>&#123;<span class="comment">//加入值</span></span><br><span class="line">    <span class="built_in">rise</span>(value,pheap);</span><br><span class="line">    ++pheap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> pos)</span></span>&#123;<span class="comment">//删除pos位的值，由sink函数引申而来</span></span><br><span class="line">    <span class="type">int</span> p=pos;</span><br><span class="line">    <span class="type">int</span> nextp_l=p*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> nextp_r=nextp_l+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(nextp_r&lt;pheap)&#123;<span class="comment">//nextp_r&lt;pheap防止右子节点越界报错</span></span><br><span class="line">        <span class="keyword">if</span>(heap[nextp_l]&gt;heap[nextp_r])&#123;<span class="comment">//让大的上浮</span></span><br><span class="line">            heap[p]=heap[nextp_l];</span><br><span class="line">            p=nextp_l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            heap[p]=heap[nextp_r];</span><br><span class="line">            p=nextp_r;</span><br><span class="line">        &#125;</span><br><span class="line">        nextp_l=<span class="number">2</span>*p+<span class="number">1</span>;</span><br><span class="line">        nextp_r=nextp_l+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rise</span>(heap[pheap<span class="number">-1</span>],p);<span class="comment">//预防空位，将最后一个值拿来填补，并且上浮保持堆的特性</span></span><br><span class="line">    --pheap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;heap[<span class="number">0</span>]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">del</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> heap[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="type">int</span> n=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">push</span>(-n*<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rise</span>(<span class="number">-5</span>,<span class="number">9</span>);</span><br><span class="line">    <span class="built_in">show</span>();</span><br><span class="line">    <span class="built_in">del</span>(<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">while</span>(pheap!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>软件清单&amp;介绍</title>
    <url>/2023/11/14/%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F/</url>
    <content><![CDATA[<h1 id="链式前向星"><a href="#链式前向星" class="headerlink" title="链式前向星"></a>链式前向星</h1><h2 id="点-node"><a href="#点-node" class="headerlink" title="点(node)"></a>点(node)</h2><h3 id="数据结构："><a href="#数据结构：" class="headerlink" title="数据结构："></a>数据结构：</h3><table>
<thead>
<tr>
<th>属性名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>headedge</td>
<td>头一条边。节点的多条边通过链表储存，该值为链表的头位置。</td>
</tr>
<tr>
<td>nodevalue</td>
<td>节点权值。</td>
</tr>
<tr>
<td>visited</td>
<td>是否访问过。用于防止dfs,bfs访问时走重复的路陷入死循环。</td>
</tr>
</tbody></table>
<h2 id="边-edge"><a href="#边-edge" class="headerlink" title="边(edge)"></a>边(edge)</h2><p>不准确，确切为“边的链表”。</p>
<h3 id="数据结构：-1"><a href="#数据结构：-1" class="headerlink" title="数据结构："></a>数据结构：</h3><table>
<thead>
<tr>
<th>属性名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>nextedge</td>
<td>下一条边。节点的多条边通过链表储存，该值为链表的下一条边。</td>
</tr>
<tr>
<td>tonode</td>
<td>指向节点。该条边指向的节点。</td>
</tr>
<tr>
<td>edgeweight</td>
<td>边权值。</td>
</tr>
</tbody></table>
<h2 id="图解："><a href="#图解：" class="headerlink" title="图解："></a>图解：</h2><p><img  
                     lazyload
                     alt="image"
                     data-src="/"
                      alt="待补充"
                ></p>
<h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EDGECNT 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NODECNT 50</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NULLNODE -1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NULLEDGE -1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NULLWEIGHT 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NULLVALUE 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NOTVISITED 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VISITED 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> nextedge[EDGECNT];</span><br><span class="line"><span class="type">int</span> tonode[EDGECNT];</span><br><span class="line"><span class="type">int</span> edgeweight[EDGECNT];</span><br><span class="line"><span class="type">int</span> pedge;</span><br><span class="line"><span class="type">int</span> headedge[NODECNT];</span><br><span class="line"><span class="type">int</span> nodevalue[NODECNT];</span><br><span class="line"><span class="type">int</span> visited[NODECNT];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pedge=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;EDGECNT;i++)&#123;</span><br><span class="line">        nextedge[i]=NULLEDGE;</span><br><span class="line">        tonode[i]=NULLNODE;</span><br><span class="line">        edgeweight[i]=NULLWEIGHT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;NODECNT;i++)&#123;</span><br><span class="line">        headedge[i]=NULLEDGE;</span><br><span class="line">        nodevalue[i]=NULLVALUE;</span><br><span class="line">        visited[i]=NOTVISITED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateEdge</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> conode,<span class="type">int</span> weight = NULLWEIGHT,<span class="type">int</span> value = NULLVALUE)</span></span>&#123;</span><br><span class="line">    nextedge[pedge]=headedge[node];</span><br><span class="line">    tonode[pedge]=conode;</span><br><span class="line">    edgeweight[pedge]=weight;</span><br><span class="line">    headedge[node]=pedge;</span><br><span class="line">    nodevalue[node]=value;</span><br><span class="line">    ++pedge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateGraph</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">CreateEdge</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">CreateEdge</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">CreateEdge</span>(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">CreateEdge</span>(<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">CreateEdge</span>(<span class="number">4</span>,<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">CreateEdge</span>(<span class="number">4</span>,<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">CreateEdge</span>(<span class="number">7</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> start)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> now = start;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    s.<span class="built_in">push</span>(start);</span><br><span class="line">    <span class="keyword">while</span>(now!=NULLNODE&amp;&amp;!s.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        now=s.<span class="built_in">top</span>();</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(visited[now]==VISITED)<span class="keyword">continue</span>;</span><br><span class="line">        visited[now]=VISITED;</span><br><span class="line">        cout&lt;&lt;now&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="type">int</span> p=headedge[now];</span><br><span class="line">        <span class="keyword">while</span>(p!=NULLEDGE)&#123;</span><br><span class="line">            s.<span class="built_in">push</span>(tonode[p]);</span><br><span class="line">            p=nextedge[p];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">CreateGraph</span>();</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;END&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
